To do
-----

- Update the grammar to include a relative path for URLs to be checked out
  into. For example:

    Thirdparty/IlmBase http://download.savannah.nongnu.org/releases/openexr/ilmbase-1.0.2.tar.gz
    Thirdparty/OpenEXR http://download.savannah.nongnu.org/releases/openexr/openexr-1.7.0.tar.gz

  The relative path is also treated as a unique name for the download, so
  changes to the URL will overwrite the existing download as long as the
  relative path stays the same.

- Extract tarballs, zip files, etc. after downloading.
  - Use zlib (http://zlib.net) for gzip support.
  - Use bzlib (http://bzip.org) for bzip2 support.
  - Use libzip (http://www.nih.at/libzip/) for zip file support.
  - Implement tar file support - http://en.wikipedia.org/wiki/Tar_(file_format)

- Per-project configuration mechanism allowing customisation of where downloads
  get extracted to; whether they all go to the same directory or a separate
  directory per url; etc.

- Subcommands:
  - install: extract downloaded deps into their correct project locations.
  - uninstall: delete any extracted deps files from the project.
  - delete: clear out the downloads folder.

- Before downloading, check that we won't end up with two or more URLs being
  downloaded to the same local file.

- Make sure we don't download files we already have.

- Windows support.

- Variable substitution into URLs? For example:

    Thirdparty/MyLib http://mylibs.com/mylib-$(os)-$(bits)-1.2.3.tgz

  Similar syntax to makefiles, i.e. $(varname). This gives a less redundant way
  to specify libraries when the URLs are organised with it in mind.
